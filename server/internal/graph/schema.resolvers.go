package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"server/internal/graph/generated"
	"server/internal/graph/model"
)

// CreateNote is the resolver for the createNote field.
func (r *mutationResolver) CreateNote(ctx context.Context, input model.NewNote) (*model.Note, error) {
	q := "insert into notes (text, user_id) values ($1, $2) returning id"
	var id int
	if err := r.Repo.GetConnection().QueryRow(ctx, q, input.Text, input.UserID).Scan(&id); err != nil {
		return nil, err
	}

	return &model.Note{
		ID:   id,
		Text: input.Text,
		User: &model.User{
			ID: input.UserID,
		},
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	q := "insert into users (name, age) values ($1, $2) returning id"
	var id int
	if err := r.Repo.GetConnection().QueryRow(ctx, q, input.Name, input.Age).Scan(&id); err != nil {
		return nil, err
	}

	return &model.User{
		ID:   id,
		Name: input.Name,
		Age:  input.Age,
	}, nil
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context) ([]*model.Note, error) {
	q := "select * from notes"
	rows, err := r.Repo.GetConnection().Query(ctx, q)
	if err != nil {
		return nil, err
	}

	notes := []*model.Note{}
	for rows.Next() {
		note := model.Note{
			User: &model.User{},
		}
		if err := rows.Scan(&note.ID, &note.Text, &note.User.ID); err != nil {
			return nil, err
		}

		notes = append(notes, &note)
	}

	return notes, nil
}

// NoteByUser is the resolver for the noteByUser field.
func (r *queryResolver) NoteByUser(ctx context.Context, userID int) ([]*model.Note, error) {
	q := "select * from notes where user_id = $1"
	rows, err := r.Repo.GetConnection().Query(ctx, q, userID)
	if err != nil {
		return nil, err
	}

	notes := []*model.Note{}
	for rows.Next() {
		note := model.Note{
			User: &model.User{},
		}
		if err := rows.Scan(&note.ID, &note.Text, &note.User.ID); err != nil {
			return nil, err
		}

		notes = append(notes, &note)
	}

	return notes, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
